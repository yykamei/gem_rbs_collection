module Faraday

  VERSION: ::String

  attr_reader self.default_adapter: Symbol

  def self.new: (?untyped url, ?untyped options) ?{ (?untyped) -> void } -> Faraday::Connection

  class Adapter
    extend MiddlewareRegistry

    CONTENT_LENGTH: "Content-Length"

    interface _SupportsParallel
      def supports_parallel: () -> boolish
      def supports_parallel=: (boolish value) -> void
      def supports_parallel?: () -> boolish
    end

    module Parallelism
      include _SupportsParallel

      def inherited: (_SupportsParallel subclass) -> void
    end

    extend Parallelism

    def initialize: (?untyped? _app, ?::Hash[untyped, untyped] opts) ?{ () -> untyped } -> void
    def connection: (untyped env) ?{ (untyped) -> untyped } -> untyped
    def close: () -> void
    def call: (untyped env) -> Response

    private

    # TODO: The block parameter should be `Utils::Headers`, but it has not yet been defined.
    def save_response: (untyped env, Integer status, String body, ?Hash[untyped, untyped]? headers, ?String? reason_phrase, ?finished: bool) ?{ (untyped) -> void } -> Response
    def request_timeout: (:read | :open | :write `type`, Hash[Symbol, untyped] options) -> Integer?

    TIMEOUT_KEYS: { read: :read_timeout, open: :open_timeout, write: :write_timeout }
  end

  class Connection
    attr_reader headers: Hash[String, String]

    def get: (?String | URI url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def head: (?String | URI url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def delete: (?String | URI url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def trace: (?String | URI url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response

    def post: (?String | URI url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def put: (?String | URI url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def patch: (?String | URI url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
  end

  class Response
    def status: () -> Integer
    def headers: () -> untyped
    def body: () -> String
    def success?: () -> bool
  end

  class Request
    def http_method=: (untyped) -> void
    def path=: (String | URI) -> void
    def params=: (untyped) -> void
    def headers=: (untyped) -> void
    def body=: (untyped) -> void
    def options=: (untyped) -> void
    def url: (String | URI path, ?::Hash[untyped, untyped] params) -> void
    def []: (untyped key) -> void
    def []=: (untyped key, untyped value) -> void
  end

  module FlatParamsEncoder
    extend Forwardable

    def self.encode: (Hash[_ToS, _ToS | Array[_ToS]] | nil params) -> (nil | String)
    def self.decode: (String | nil query) -> (nil | Hash[String, true | String | Array[String]])

    attr_accessor self.sort_params: boolish
  end

  class Middleware
    extend MiddlewareRegistry

    attr_reader app: untyped
    attr_reader options: Hash[untyped, untyped]

    def initialize: (?untyped? app, ?::Hash[untyped, untyped] options) -> void
    def call: (untyped env) -> untyped
    def close: () -> void
  end

  module MiddlewareRegistry
    def registered_middleware: () -> Hash[Symbol, untyped]
    def register_middleware: (**untyped mappings) -> void
    def unregister_middleware: (Symbol key) -> void
    def lookup_middleware: (Symbol key) -> untyped

    private

    def middleware_mutex: () ?{ () -> untyped } -> void
    def load_middleware: (Symbol key) -> untyped
  end

  module Utils
    class Headers < ::Hash[Symbol | String, untyped]
      @names: ::Hash[String, String]

      def self.from: (untyped value) -> Headers
      def self.allocate: () -> Headers
      def initialize: (?::Hash[Symbol | String, untyped]? hash) -> void
      def initialize_names: () -> void
      def initialize_copy: (self other) -> self

      KeyMap: ::Hash[Symbol, String]

      def []: (String | Symbol key) -> untyped?
      def []=: (String | Symbol key, untyped val) -> untyped
      def fetch: (String | Symbol key, *untyped args) ?{ () -> untyped } -> untyped
      def delete: (String | Symbol key) -> untyped?
      def include?: (String | Symbol key) -> bool

      alias has_key? include?
      alias member? include?
      alias key? include?

      def merge!: (::Hash[Symbol | String, untyped] other) -> self
      alias update merge!

      def merge: (::Hash[Symbol | String, untyped] other) -> Headers
      def replace: (::Hash[Symbol | String, untyped] other) -> self
      def to_hash: () -> Headers
      def parse: (String? header_string) -> Array[untyped]?

      attr_reader names: ::Hash[String, String]

      private

      def add_parsed: (Symbol | String key, String value) -> untyped
    end
  end
end
